// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userGroupsMembers.proto

package userGroupsMembers

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserGroupsMembersService service

func NewUserGroupsMembersServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserGroupsMembersService service

type UserGroupsMembersService interface {
	//添加群成员
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...client.CallOption) (*AddMemberResponse, error)
	//删除群成员
	DelByMember(ctx context.Context, in *DelByMemberIdRequest, opts ...client.CallOption) (*DelByMemberIdResponse, error)
	//解散群
	DelMembers(ctx context.Context, in *DelMembersRequest, opts ...client.CallOption) (*DelMembersResponse, error)
}

type userGroupsMembersService struct {
	c    client.Client
	name string
}

func NewUserGroupsMembersService(name string, c client.Client) UserGroupsMembersService {
	return &userGroupsMembersService{
		c:    c,
		name: name,
	}
}

func (c *userGroupsMembersService) AddMember(ctx context.Context, in *AddMemberRequest, opts ...client.CallOption) (*AddMemberResponse, error) {
	req := c.c.NewRequest(c.name, "UserGroupsMembersService.AddMember", in)
	out := new(AddMemberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsMembersService) DelByMember(ctx context.Context, in *DelByMemberIdRequest, opts ...client.CallOption) (*DelByMemberIdResponse, error) {
	req := c.c.NewRequest(c.name, "UserGroupsMembersService.DelByMember", in)
	out := new(DelByMemberIdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsMembersService) DelMembers(ctx context.Context, in *DelMembersRequest, opts ...client.CallOption) (*DelMembersResponse, error) {
	req := c.c.NewRequest(c.name, "UserGroupsMembersService.DelMembers", in)
	out := new(DelMembersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserGroupsMembersService service

type UserGroupsMembersServiceHandler interface {
	//添加群成员
	AddMember(context.Context, *AddMemberRequest, *AddMemberResponse) error
	//删除群成员
	DelByMember(context.Context, *DelByMemberIdRequest, *DelByMemberIdResponse) error
	//解散群
	DelMembers(context.Context, *DelMembersRequest, *DelMembersResponse) error
}

func RegisterUserGroupsMembersServiceHandler(s server.Server, hdlr UserGroupsMembersServiceHandler, opts ...server.HandlerOption) error {
	type userGroupsMembersService interface {
		AddMember(ctx context.Context, in *AddMemberRequest, out *AddMemberResponse) error
		DelByMember(ctx context.Context, in *DelByMemberIdRequest, out *DelByMemberIdResponse) error
		DelMembers(ctx context.Context, in *DelMembersRequest, out *DelMembersResponse) error
	}
	type UserGroupsMembersService struct {
		userGroupsMembersService
	}
	h := &userGroupsMembersServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserGroupsMembersService{h}, opts...))
}

type userGroupsMembersServiceHandler struct {
	UserGroupsMembersServiceHandler
}

func (h *userGroupsMembersServiceHandler) AddMember(ctx context.Context, in *AddMemberRequest, out *AddMemberResponse) error {
	return h.UserGroupsMembersServiceHandler.AddMember(ctx, in, out)
}

func (h *userGroupsMembersServiceHandler) DelByMember(ctx context.Context, in *DelByMemberIdRequest, out *DelByMemberIdResponse) error {
	return h.UserGroupsMembersServiceHandler.DelByMember(ctx, in, out)
}

func (h *userGroupsMembersServiceHandler) DelMembers(ctx context.Context, in *DelMembersRequest, out *DelMembersResponse) error {
	return h.UserGroupsMembersServiceHandler.DelMembers(ctx, in, out)
}
