// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userFriends.proto

package userFriends

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserFriendsService service

func NewUserFriendsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserFriendsService service

type UserFriendsService interface {
	//获取好友列表
	Friends(ctx context.Context, in *FriendsRequest, opts ...client.CallOption) (*FriendsResponse, error)
	//添加好友申请
	ApplyFriends(ctx context.Context, in *ApplyFriendsRequest, opts ...client.CallOption) (*ApplyFriendsResponse, error)
	//同意好友申请
	ApproveFriends(ctx context.Context, in *ApproveFriendsRequest, opts ...client.CallOption) (*ApproveFriendsResponse, error)
	//拒绝好友申请
	RefuseFriends(ctx context.Context, in *RefuseFriendsRequest, opts ...client.CallOption) (*RefuseFriendsResponse, error)
	//删除好友
	DelFriends(ctx context.Context, in *DelFriendsRequest, opts ...client.CallOption) (*DelFriendsResponse, error)
}

type userFriendsService struct {
	c    client.Client
	name string
}

func NewUserFriendsService(name string, c client.Client) UserFriendsService {
	return &userFriendsService{
		c:    c,
		name: name,
	}
}

func (c *userFriendsService) Friends(ctx context.Context, in *FriendsRequest, opts ...client.CallOption) (*FriendsResponse, error) {
	req := c.c.NewRequest(c.name, "UserFriendsService.Friends", in)
	out := new(FriendsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendsService) ApplyFriends(ctx context.Context, in *ApplyFriendsRequest, opts ...client.CallOption) (*ApplyFriendsResponse, error) {
	req := c.c.NewRequest(c.name, "UserFriendsService.ApplyFriends", in)
	out := new(ApplyFriendsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendsService) ApproveFriends(ctx context.Context, in *ApproveFriendsRequest, opts ...client.CallOption) (*ApproveFriendsResponse, error) {
	req := c.c.NewRequest(c.name, "UserFriendsService.ApproveFriends", in)
	out := new(ApproveFriendsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendsService) RefuseFriends(ctx context.Context, in *RefuseFriendsRequest, opts ...client.CallOption) (*RefuseFriendsResponse, error) {
	req := c.c.NewRequest(c.name, "UserFriendsService.RefuseFriends", in)
	out := new(RefuseFriendsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFriendsService) DelFriends(ctx context.Context, in *DelFriendsRequest, opts ...client.CallOption) (*DelFriendsResponse, error) {
	req := c.c.NewRequest(c.name, "UserFriendsService.DelFriends", in)
	out := new(DelFriendsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserFriendsService service

type UserFriendsServiceHandler interface {
	//获取好友列表
	Friends(context.Context, *FriendsRequest, *FriendsResponse) error
	//添加好友申请
	ApplyFriends(context.Context, *ApplyFriendsRequest, *ApplyFriendsResponse) error
	//同意好友申请
	ApproveFriends(context.Context, *ApproveFriendsRequest, *ApproveFriendsResponse) error
	//拒绝好友申请
	RefuseFriends(context.Context, *RefuseFriendsRequest, *RefuseFriendsResponse) error
	//删除好友
	DelFriends(context.Context, *DelFriendsRequest, *DelFriendsResponse) error
}

func RegisterUserFriendsServiceHandler(s server.Server, hdlr UserFriendsServiceHandler, opts ...server.HandlerOption) error {
	type userFriendsService interface {
		Friends(ctx context.Context, in *FriendsRequest, out *FriendsResponse) error
		ApplyFriends(ctx context.Context, in *ApplyFriendsRequest, out *ApplyFriendsResponse) error
		ApproveFriends(ctx context.Context, in *ApproveFriendsRequest, out *ApproveFriendsResponse) error
		RefuseFriends(ctx context.Context, in *RefuseFriendsRequest, out *RefuseFriendsResponse) error
		DelFriends(ctx context.Context, in *DelFriendsRequest, out *DelFriendsResponse) error
	}
	type UserFriendsService struct {
		userFriendsService
	}
	h := &userFriendsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserFriendsService{h}, opts...))
}

type userFriendsServiceHandler struct {
	UserFriendsServiceHandler
}

func (h *userFriendsServiceHandler) Friends(ctx context.Context, in *FriendsRequest, out *FriendsResponse) error {
	return h.UserFriendsServiceHandler.Friends(ctx, in, out)
}

func (h *userFriendsServiceHandler) ApplyFriends(ctx context.Context, in *ApplyFriendsRequest, out *ApplyFriendsResponse) error {
	return h.UserFriendsServiceHandler.ApplyFriends(ctx, in, out)
}

func (h *userFriendsServiceHandler) ApproveFriends(ctx context.Context, in *ApproveFriendsRequest, out *ApproveFriendsResponse) error {
	return h.UserFriendsServiceHandler.ApproveFriends(ctx, in, out)
}

func (h *userFriendsServiceHandler) RefuseFriends(ctx context.Context, in *RefuseFriendsRequest, out *RefuseFriendsResponse) error {
	return h.UserFriendsServiceHandler.RefuseFriends(ctx, in, out)
}

func (h *userFriendsServiceHandler) DelFriends(ctx context.Context, in *DelFriendsRequest, out *DelFriendsResponse) error {
	return h.UserFriendsServiceHandler.DelFriends(ctx, in, out)
}
