// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userGroups.proto

package userGroups

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserGroupsService services

func NewUserGroupsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserGroupsService services

type UserGroupsService interface {
	//创建群
	CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...client.CallOption) (*CreateGroupResponse, error)
	//删除群
	DelGroup(ctx context.Context, in *DelGroupRequest, opts ...client.CallOption) (*DelGroupResponse, error)
	//获取群列表
	Groups(ctx context.Context, in *GroupsRequest, opts ...client.CallOption) (*GroupsResponse, error)
	//根据群id获取群
	FindByGid(ctx context.Context, in *FindByGidRequest, opts ...client.CallOption) (*FindByGidResponse, error)
	//修改群信息
	EditGroup(ctx context.Context, in *EditGroupRequest, opts ...client.CallOption) (*EditGroupResponse, error)
}

type userGroupsService struct {
	c    client.Client
	name string
}

func NewUserGroupsService(name string, c client.Client) UserGroupsService {
	return &userGroupsService{
		c:    c,
		name: name,
	}
}

func (c *userGroupsService) CreateGroup(ctx context.Context, in *CreateGroupRequest, opts ...client.CallOption) (*CreateGroupResponse, error) {
	req := c.c.NewRequest(c.name, "UserGroupsService.CreateGroup", in)
	out := new(CreateGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsService) DelGroup(ctx context.Context, in *DelGroupRequest, opts ...client.CallOption) (*DelGroupResponse, error) {
	req := c.c.NewRequest(c.name, "UserGroupsService.DelGroup", in)
	out := new(DelGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsService) Groups(ctx context.Context, in *GroupsRequest, opts ...client.CallOption) (*GroupsResponse, error) {
	req := c.c.NewRequest(c.name, "UserGroupsService.Groups", in)
	out := new(GroupsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsService) FindByGid(ctx context.Context, in *FindByGidRequest, opts ...client.CallOption) (*FindByGidResponse, error) {
	req := c.c.NewRequest(c.name, "UserGroupsService.FindByGid", in)
	out := new(FindByGidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupsService) EditGroup(ctx context.Context, in *EditGroupRequest, opts ...client.CallOption) (*EditGroupResponse, error) {
	req := c.c.NewRequest(c.name, "UserGroupsService.EditGroup", in)
	out := new(EditGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserGroupsService services

type UserGroupsServiceHandler interface {
	//创建群
	CreateGroup(context.Context, *CreateGroupRequest, *CreateGroupResponse) error
	//删除群
	DelGroup(context.Context, *DelGroupRequest, *DelGroupResponse) error
	//获取群列表
	Groups(context.Context, *GroupsRequest, *GroupsResponse) error
	//根据群id获取群
	FindByGid(context.Context, *FindByGidRequest, *FindByGidResponse) error
	//修改群信息
	EditGroup(context.Context, *EditGroupRequest, *EditGroupResponse) error
}

func RegisterUserGroupsServiceHandler(s server.Server, hdlr UserGroupsServiceHandler, opts ...server.HandlerOption) error {
	type userGroupsService interface {
		CreateGroup(ctx context.Context, in *CreateGroupRequest, out *CreateGroupResponse) error
		DelGroup(ctx context.Context, in *DelGroupRequest, out *DelGroupResponse) error
		Groups(ctx context.Context, in *GroupsRequest, out *GroupsResponse) error
		FindByGid(ctx context.Context, in *FindByGidRequest, out *FindByGidResponse) error
		EditGroup(ctx context.Context, in *EditGroupRequest, out *EditGroupResponse) error
	}
	type UserGroupsService struct {
		userGroupsService
	}
	h := &userGroupsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserGroupsService{h}, opts...))
}

type userGroupsServiceHandler struct {
	UserGroupsServiceHandler
}

func (h *userGroupsServiceHandler) CreateGroup(ctx context.Context, in *CreateGroupRequest, out *CreateGroupResponse) error {
	return h.UserGroupsServiceHandler.CreateGroup(ctx, in, out)
}

func (h *userGroupsServiceHandler) DelGroup(ctx context.Context, in *DelGroupRequest, out *DelGroupResponse) error {
	return h.UserGroupsServiceHandler.DelGroup(ctx, in, out)
}

func (h *userGroupsServiceHandler) Groups(ctx context.Context, in *GroupsRequest, out *GroupsResponse) error {
	return h.UserGroupsServiceHandler.Groups(ctx, in, out)
}

func (h *userGroupsServiceHandler) FindByGid(ctx context.Context, in *FindByGidRequest, out *FindByGidResponse) error {
	return h.UserGroupsServiceHandler.FindByGid(ctx, in, out)
}

func (h *userGroupsServiceHandler) EditGroup(ctx context.Context, in *EditGroupRequest, out *EditGroupResponse) error {
	return h.UserGroupsServiceHandler.EditGroup(ctx, in, out)
}
