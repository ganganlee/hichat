// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: gateway.proto

package gateway

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GatewayService services

func NewGatewayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GatewayService services

type GatewayService interface {
	//发送消息到网关
	SendMsg(ctx context.Context, in *SendMsgRequest, opts ...client.CallOption) (*SendMsgResponse, error)
}

type gatewayService struct {
	c    client.Client
	name string
}

func NewGatewayService(name string, c client.Client) GatewayService {
	return &gatewayService{
		c:    c,
		name: name,
	}
}

func (c *gatewayService) SendMsg(ctx context.Context, in *SendMsgRequest, opts ...client.CallOption) (*SendMsgResponse, error) {
	req := c.c.NewRequest(c.name, "GatewayService.SendMsg", in)
	out := new(SendMsgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GatewayService services

type GatewayServiceHandler interface {
	//发送消息到网关
	SendMsg(context.Context, *SendMsgRequest, *SendMsgResponse) error
}

func RegisterGatewayServiceHandler(s server.Server, hdlr GatewayServiceHandler, opts ...server.HandlerOption) error {
	type gatewayService interface {
		SendMsg(ctx context.Context, in *SendMsgRequest, out *SendMsgResponse) error
	}
	type GatewayService struct {
		gatewayService
	}
	h := &gatewayServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GatewayService{h}, opts...))
}

type gatewayServiceHandler struct {
	GatewayServiceHandler
}

func (h *gatewayServiceHandler) SendMsg(ctx context.Context, in *SendMsgRequest, out *SendMsgResponse) error {
	return h.GatewayServiceHandler.SendMsg(ctx, in, out)
}
