// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService services

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService services

type UserService interface {
	//用户注册
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	//用户登录
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	//根据token查找用户
	FindByUuid(ctx context.Context, in *FindByUuidRequest, opts ...client.CallOption) (*FindByUuidResponse, error)
	//修改个人信息
	EditInfo(ctx context.Context, in *EditInfoRequest, opts ...client.CallOption) (*EditInfoResponse, error)
	//根据用户名查找用户
	FindByUsername(ctx context.Context, in *FindByUsernameRequest, opts ...client.CallOption) (*FindByUsernameResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindByUuid(ctx context.Context, in *FindByUuidRequest, opts ...client.CallOption) (*FindByUuidResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.FindByUuid", in)
	out := new(FindByUuidResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) EditInfo(ctx context.Context, in *EditInfoRequest, opts ...client.CallOption) (*EditInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.EditInfo", in)
	out := new(EditInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindByUsername(ctx context.Context, in *FindByUsernameRequest, opts ...client.CallOption) (*FindByUsernameResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.FindByUsername", in)
	out := new(FindByUsernameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService services

type UserServiceHandler interface {
	//用户注册
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	//用户登录
	Login(context.Context, *LoginRequest, *LoginResponse) error
	//根据token查找用户
	FindByUuid(context.Context, *FindByUuidRequest, *FindByUuidResponse) error
	//修改个人信息
	EditInfo(context.Context, *EditInfoRequest, *EditInfoResponse) error
	//根据用户名查找用户
	FindByUsername(context.Context, *FindByUsernameRequest, *FindByUsernameResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		FindByUuid(ctx context.Context, in *FindByUuidRequest, out *FindByUuidResponse) error
		EditInfo(ctx context.Context, in *EditInfoRequest, out *EditInfoResponse) error
		FindByUsername(ctx context.Context, in *FindByUsernameRequest, out *FindByUsernameResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.UserServiceHandler.Register(ctx, in, out)
}

func (h *userServiceHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) FindByUuid(ctx context.Context, in *FindByUuidRequest, out *FindByUuidResponse) error {
	return h.UserServiceHandler.FindByUuid(ctx, in, out)
}

func (h *userServiceHandler) EditInfo(ctx context.Context, in *EditInfoRequest, out *EditInfoResponse) error {
	return h.UserServiceHandler.EditInfo(ctx, in, out)
}

func (h *userServiceHandler) FindByUsername(ctx context.Context, in *FindByUsernameRequest, out *FindByUsernameResponse) error {
	return h.UserServiceHandler.FindByUsername(ctx, in, out)
}
